<#@ template hostspecific="false" language="C#" #>
#pragma warning disable IDE0017

namespace HyperJet;

using System;

public static partial class MathD
{
<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"D{size}Scalar";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> Divide(double a, <#= scalar #> b)
    {
        var db = -a / (b.Constant * b.Constant);
        var result = new <#= scalar #>(a / b.Constant);
<#
for (int i = 0; i < size; i++)
{
#>
        result.D<#= i #> = db * b.D<#= i #>;
<#
}
#>
        return result;
    }

    public static <#= scalar #> Divide(<#= scalar #> a, double b)
    {
        var da = 1 / b;
        var result = new <#= scalar #>(a.Constant / b);
<#
for (int i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #>;
<#
}
#>
        return result;
    }

    public static <#= scalar #> Divide(<#= scalar #> a, <#= scalar #> b)
    {
        var da = 1 / b.Constant;
        var db = -a.Constant / (b.Constant * b.Constant);
        var result = new <#= scalar #>(a.Constant / b.Constant);
<#
for (int i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #> + db * b.D<#= i #>;
<#
}
#>
        return result;
    }
<#
}
#>

<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"DD{size}Scalar";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> Divide(double a, <#= scalar #> b)
    {
        var db = -a / (b.Constant * b.Constant);
        var dbdb = 2 * a / (b.Constant * b.Constant * b.Constant);
        var result = new <#= scalar #>(a / b.Constant);
<#
for (int i = 0; i < size; i++)
{
#>
        result.D<#= i #> = db * b.D<#= i #>;
<#
}
for (int i = 0; i < size; i++)
{
#>
        var cb<#= i #> = dbdb * b.D<#= i #>;
<#
}
for (int i = 0; i < size; i++)
{
    for (int j = i; j < size; j++)
    {
#>
        result.D<#= i #>D<#= j #> = db * b.D<#= i #>D<#= j #> + cb<#= i #> * b.D<#= j #>;
<#
    }
}
#>
        return result;
    }

    public static <#= scalar #> Divide(<#= scalar #> a, double b)
    {
        var da = 1 / b;
        var result = new <#= scalar #>(a.Constant / b);
<#
for (int i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #>;
<#
}
for (int i = 0; i < size; i++)
{
    for (int j = i; j < size; j++)
    {
#>
        result.D<#= i #>D<#= j #> = da * a.D<#= i #>D<#= j #>;
<#
    }
}
#>
        return result;
    }

    public static <#= scalar #> Divide(<#= scalar #> a, <#= scalar #> b)
    {
        var da = 1 / b.Constant;
        var tmp = da * da;
        var db = -a.Constant * tmp;
        var dadb = -1 * tmp;
        var dbdb = -2 * db * da;
        var result = new <#= scalar #>(a.Constant * da);
<#
for (int i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #> + db * b.D<#= i #>;
<#
}
#>

<#
for (int i = 0; i < size; i++)
{
#>
        var ca<#= i #> = dadb * b.D<#= i #>;
        var cb<#= i #> = dadb * a.D<#= i #> + dbdb * b.D<#= i #>;
<#
}
for (int i = 0; i < size; i++)
{
    for (int j = i; j < size; j++)
    {
#>
        result.D<#= i #>D<#= j #> = da * a.D<#= i #>D<#= j #> + db * b.D<#= i #>D<#= j #> + ca<#= i #> * a.D<#= j #> + cb<#= i #> * b.D<#= j #>;
<#
    }
}
#>
        return result;
    }
<#
}
#>
}
