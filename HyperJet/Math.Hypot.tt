<#@ template hostspecific="false" language="C#" #>
namespace HyperJet;

using System;

public static partial class MathD
{
<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"D{size}Scalar";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> Hypot(double a, <#= scalar #> b)
    {
        var constant = Math.Sqrt(a * a + b.Constant * b.Constant);
        var db = b.Constant / constant;

        return <#= scalar #>.Forward(constant, db, b);
    }
    
    public static <#= scalar #> Hypot(<#= scalar #> a, double b)
    {
        var constant = Math.Sqrt(a.Constant * a.Constant + b * b);
        var da = a.Constant / constant;

        return <#= scalar #>.Forward(constant, da, a);
    }

    public static <#= scalar #> Hypot(<#= scalar #> a, <#= scalar #> b)
    {
        var constant = Math.Sqrt(a.Constant * a.Constant + b.Constant * b.Constant);
        var da = a.Constant / constant;
        var db = b.Constant / constant;

        return <#= scalar #>.Forward(constant, da, db, a, b);
    }
    
    public static <#= scalar #> Hypot(double a, <#= scalar #> b, <#= scalar #> c)
    {
        var constant = Math.Sqrt(a * a + b.Constant * b.Constant + c.Constant * c.Constant);
        var db = b.Constant / constant;
        var dc = c.Constant / constant;

        return <#= scalar #>.Forward(constant, db, dc, b, c);
    }
    
    public static <#= scalar #> Hypot(double a, double b, <#= scalar #> c)
    {
        var constant = Math.Sqrt(a * a + b * b + c.Constant * c.Constant);
        var dc = c.Constant / constant;

        return <#= scalar #>.Forward(constant, dc, c);
    }
    
    public static <#= scalar #> Hypot(<#= scalar #> a, <#= scalar #> b, <#= scalar #> c)
    {
        var constant = Math.Sqrt(a.Constant * a.Constant + b.Constant * b.Constant + c.Constant * c.Constant);
        var da = a.Constant / constant;
        var db = b.Constant / constant;
        var dc = c.Constant / constant;

        return <#= scalar #>.Forward(constant, da, db, dc, a, b, c);
    }
<#
}
#>

<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"DD{size}Scalar";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> Hypot(double a, <#= scalar #> b)
    {
        var constant = Math.Sqrt(a * a + b.Constant * b.Constant);
        var tmp = 1 / (constant * constant * constant);
        var db = b.Constant / constant;
        var dbdb = a * a * tmp;

        return <#= scalar #>.Forward(constant, db, dbdb, b);
    }
    
    public static <#= scalar #> Hypot(<#= scalar #> a, double b)
    {
        var constant = Math.Sqrt(a.Constant * a.Constant + b * b);
        var tmp = 1 / (constant * constant * constant);
        var da = a.Constant / constant;
        var dada = b * b * tmp;

        return <#= scalar #>.Forward(constant, da, dada, a);
    }

    public static <#= scalar #> Hypot(<#= scalar #> a, <#= scalar #> b)
    {
        var constant = Math.Sqrt(a.Constant * a.Constant + b.Constant * b.Constant);
        var tmp = 1 / (constant * constant * constant);
        var da = a.Constant / constant;
        var db = b.Constant / constant;
        var dada = b.Constant * b.Constant * tmp;
        var dadb = -a.Constant * b.Constant * tmp;
        var dbdb = a.Constant * a.Constant * tmp;

        return <#= scalar #>.Forward(constant, da, db, dada, dadb, dbdb, a, b);
    }
    
    public static <#= scalar #> Hypot(double a, <#= scalar #> b, <#= scalar #> c)
    {
        var constant = Math.Sqrt(a * a + b.Constant * b.Constant + c.Constant * c.Constant);
        var tmp = 1 / (constant * constant * constant);
        var a2 = a * a;
        var b2 = b.Constant * b.Constant;
        var c2 = c.Constant * c.Constant;
        var db = b.Constant / constant;
        var dc = c.Constant / constant;
        var dbdb = (a2 + c2) * tmp;
        var dbdc = -(b.Constant * c.Constant) * tmp;
        var dcdc = (a2 + b2) * tmp;

        return <#= scalar #>.Forward(constant, db, dc, dbdb, dbdc, dcdc, b, c);
    }
    
    public static <#= scalar #> Hypot(double a, double b, <#= scalar #> c)
    {
        var constant = Math.Sqrt(a * a + b * b + c.Constant * c.Constant);
        var tmp = 1 / (constant * constant * constant);
        var a2 = a * a;
        var b2 = b * b;
        var dc = c.Constant / constant;
        var dcdc = (a2 + b2) * tmp;

        return <#= scalar #>.Forward(constant, dc, dcdc, c);
    }

    public static <#= scalar #> Hypot(<#= scalar #> a, <#= scalar #> b, <#= scalar #> c)
    {
        var constant = Math.Sqrt(a.Constant * a.Constant + b.Constant * b.Constant + c.Constant * c.Constant);
        var tmp = 1 / (constant * constant * constant);
        var a2 = a.Constant * a.Constant;
        var b2 = b.Constant * b.Constant;
        var c2 = c.Constant * c.Constant;
        var da = a.Constant / constant;
        var db = b.Constant / constant;
        var dc = c.Constant / constant;
        var dada = (b2 + c2) * tmp;
        var dadb = -(a.Constant * b.Constant) * tmp;
        var dadc = -(a.Constant * c.Constant) * tmp;
        var dbdb = (a2 + c2) * tmp;
        var dbdc = -(b.Constant * c.Constant) * tmp;
        var dcdc = (a2 + b2) * tmp;

        return <#= scalar #>.Forward(constant, da, db, dc, dada, dadb, dadc, dbdb, dbdc, dcdc, a, b, c);
    }
<#
}
#>
}
