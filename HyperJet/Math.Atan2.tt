<#@ template hostspecific="false" language="C#" #>
namespace HyperJet;

using System;

public static partial class MathD
{
<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"D{size}Scalar";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> Atan2(double a, <#= scalar #> b)
    {
        var constant = Math.Atan2(a, b.Constant);
        var db = -a / (a * a + b.Constant * b.Constant);

        return <#= scalar #>.Forward(constant, db, b);
    }

    public static <#= scalar #> Atan2(<#= scalar #> a, double b)
    {
        var constant = Math.Atan2(a.Constant, b);
        var da = b / (a.Constant * a.Constant + b * b);

        return <#= scalar #>.Forward(constant, da, a);
    }

    public static <#= scalar #> Atan2(<#= scalar #> a, <#= scalar #> b)
    {
        var tmp = a.Constant * a.Constant + b.Constant * b.Constant;

        var constant = Math.Atan2(a.Constant, b.Constant);
        var da = b.Constant / tmp;
        var db = -a.Constant / tmp;

        return <#= scalar #>.Forward(constant, da, db, a, b);
    }
<#
}
#>

<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"DD{size}Scalar";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> Atan2(double a, <#= scalar #> b)
    {
        var tmp = 1 / (a * a + b.Constant * b.Constant);

        var constant = Math.Atan2(a, b.Constant);
        var db = -a * tmp;
        var dbb = a * tmp * b.Constant * tmp * 2;

        return <#= scalar #>.Forward(constant, db, dbb, b);
    }

    public static <#= scalar #> Atan2(<#= scalar #> a, double b)
    {
        var tmp = 1 / (a.Constant * a.Constant + b * b);

        var constant = Math.Atan2(a.Constant, b);
        var da = b * tmp;
        var daa = -a.Constant * tmp * da * 2;

        return <#= scalar #>.Forward(constant, da, daa, a);
    }

    public static <#= scalar #> Atan2(<#= scalar #> a, <#= scalar #> b)
    {
        var tmp = 1 / (a.Constant * a.Constant + b.Constant * b.Constant);

        var constant = Math.Atan2(a.Constant, b.Constant);
        var da = b.Constant * tmp;
        var db = -a.Constant * tmp;
        var daa = db * da * 2;
        var dab = db * db - da * da;
        var dbb = -daa;

        return <#= scalar #>.Forward(constant, da, db, daa, dab, dbb, a, b);
    }
<#
}
#>
}
