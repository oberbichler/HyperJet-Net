<#@ template hostspecific="false" language="C#" #>
#pragma warning disable IDE0017

namespace HyperJet;

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"DD{size}Scalar";
    
    if (size > 1)
    {
#>

<#
    }
#>
[StructLayout(LayoutKind.Sequential)]
[DebuggerDisplay("{Constant}")]
public class <#= scalar #> : IScalar, IEquatable<<#= scalar #>>, IComparable<<#= scalar #>>
{
    public double Constant;
<# for (var i = 0; i < size; i++) { #>
    public double D<#= i #>;
<# } for (var i = 0; i < size; i++) for (var j = i; j < size; j++) { #>
    public double D<#= i #>D<#= j #>;
<# } #>

    public <#= scalar #>()
    {
    }

    public <#= scalar #>(double constant)
    {
        Constant = constant;
    }

    public <#= scalar #>(double constant<# for (var i = 0; i < size; i++) { #>, double d<#= i #><# } for (var i = 0; i < size; i++) for (var j = i; j < size; j++) { #>, double d<#= i #>d<#= j #><# } #>)
    {
        Constant = constant;
<#
for (var i = 0; i < size; i++)
{
#>
        D<#= i #> = d<#= i #>;
<#
}
for (var i = 0; i < size; i++)
{
    for (var j = i; j < size; j++) {
#>
        D<#= i #>D<#= j #> = d<#= i #>d<#= j #>;
<#
    }
}
#>
    }
    
    public <#= scalar #>(ReadOnlySpan<double> data)
    {
<#
var it = 0;
#>
        Constant = data[<#= it++ #>];
<#
for (var i = 0; i < size; i++)
{
#>
        D<#= i #> = data[<#= it++ #>];
<#
}
for (var i = 0; i < size; i++)
{
    for (var j = i; j < size; j++) {
#>
        D<#= i #>D<#= j #> = data[<#= it++ #>];
<#
    }
}
#>
    }

<#
if (size == 1)
{
#>
    public static <#= scalar #> Variable(double constant)
    {
        var result = new <#= scalar #>();
        result.Constant = constant;
        result.D0 = 1;
        return result;
    }

<#
}
else
{
    for (var i = 0; i < size; i++)
    {
#>
    public static <#= scalar #> Variable<#= i #>(double constant)
    {
        var result = new <#= scalar #>();
        result.Constant = constant;
        result.D<#= i #> = 1;
        return result;
    }

<#
}
#>
    public static (<#= scalar #><# for (var i = 1; i < size; i++) { #>, <#= scalar #><# } #>) Variables(double constant0<# for (var i = 1; i < size; i++) { #>, double constant<#= i #><# } #>)
    {
<#
for (var i = 0; i < size; i++)
{
#>
        var variable<#= i #> = Variable<#= i #>(constant<#= i #>);
<#
}
#>

        return (variable0<# for (var i = 1; i < size; i++) { #>, variable<#= i #><# } #>);
    }
    
    public static <#= scalar #>[] Variables(double[] constants)
    {
        if (constants.Length != <#= size #>)
            throw new ArgumentException("Invalid size.", nameof(constants));

        var variables = new <#= scalar #>[<#= size #>];
<#
for (var i = 0; i < size; i++)
{
#>
        variables[<#= i #>] = Variable<#= i #>(constants[<#= i #>]);
<#
}
#>

        return variables;
    }

<#
}
#>
    public double Evaluate(double d0<# for (var i = 1; i < size; i++) { #>, double d<#= i #><# } #>)
    {
        var result = 0.0;
        
<# for (var i = 0; i < size; i++) { #>
        var tmp<#= i #> = 0.0;
<# for (var j = 0; j < size; j++) { #>
        tmp<#= i #> += d<#= j #> * D<#= Math.Min(i, j) #>D<#= Math.Max(i, j) #>;
<# } #>
        result += d<#= i #> * tmp<#= i #>;

<# } #>
        result *= 0.5;
        result += Constant;
        
<# for (var i = 0; i < size; i++) { #>
        result += D<#= i #> * d<#= i #>;
<# } #>

        return result;
    }

    public override string ToString()
    {
        return $"{Constant}hj";
    }
    
	public static bool operator ==(<#= scalar #> lhs, <#= scalar #> rhs)
	{
		if (lhs is null || rhs is null)
			return false;

		return lhs.Constant == rhs.Constant;
	}

	public static bool operator !=(<#= scalar #> lhs, <#= scalar #> rhs)
	{
		if (lhs is null || rhs is null)
			return false;

		return lhs.Constant != rhs.Constant;
	}

	public static bool operator >(<#= scalar #> lhs, <#= scalar #> rhs)
	{
		if (lhs is null || rhs is null)
			return false;
		
		return lhs.Constant > rhs.Constant;
	}

	public static bool operator <(<#= scalar #> lhs, <#= scalar #> rhs)
	{
		if (lhs is null || rhs is null)
			return false;

		return lhs.Constant < rhs.Constant;
	}

	public static bool operator >=(<#= scalar #> lhs, <#= scalar #> rhs)
	{
		if (lhs is null || rhs is null)
			return false;

		return lhs.Constant >= rhs.Constant;
	}
	
	public static bool operator <=(<#= scalar #> lhs, <#= scalar #> rhs)
	{
		if (lhs is null || rhs is null)
			return false;

		return lhs.Constant <= rhs.Constant;
	}
    
	public override bool Equals(object obj)
	{
		return Equals(obj as <#= scalar #>);
	}

	public bool Equals(<#= scalar #> other)
	{
		return this == other;
	}
	
	public override int GetHashCode()
	{
		return Constant.GetHashCode();
	}

	public int CompareTo(<#= scalar #> other)
	{
		return Constant.CompareTo(other.Constant);
	}

    // Data access

    public int Size { get; } = <#= size #>;
    
    unsafe public Span<double> Data()
    {
        var ptr = Unsafe.AsPointer(ref Constant);
        return new Span<double>(ptr, <#= 1 + size + (size + 1) * size / 2 #>);
    }
    
    public double[] ToArray()
    {
        return Data().ToArray();
    }
    
    public ref double Data(int i)
    {
		if (i >= <#= 1 + size + (size + 1) * size / 2 #>)
			throw new IndexOutOfRangeException();

		return ref Unsafe.Add(ref Constant, i);
    }

    public ref double D(int i)
    {
		if (i >= <#= size #>)
			throw new IndexOutOfRangeException();

		return ref Unsafe.Add(ref D0, i);
    }
    
	public ref double DD(int i)
	{
		if (i >= <#= size  * (size + 1) / 2 #>)
			throw new IndexOutOfRangeException();

		return ref Unsafe.Add(ref D0D0, i);
	}
    
	public ref double DD(int i, int j)
	{
        var idx = i < j
            ? (<#= 2 * size - 1 #> - i) * i / 2 + j
            : (<#= 2 * size - 1 #> - j) * j / 2 + i;

		if (idx >= <#= size  * (size + 1) / 2 #>)
			throw new IndexOutOfRangeException();

		return ref Unsafe.Add(ref D0D0, idx);
	}

    // Transformations

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> Forward(double constant, double da, double dada, <#= scalar #> a)
    {
        var result = new <#= scalar #>(constant);
<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #>;
<#
}
#>

<#
for (var i = 0; i < size; i++) {
#>
        var ca<#= i #> = dada * a.D<#= i #>;
<#
}
#>

<#
for (var i = 0; i < size; i++)
{
#>
<#
    for (var j = i; j < size; j++)
    {
#>
        result.D<#= i #>D<#= j #> = da * a.D<#= i #>D<#= j #> + ca<#= i #> * a.D<#= j #>;
<#
    }
}
#>

        return result;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> Forward(double constant, double da, double db, double dada, double dadb, double dbdb, <#= scalar #> a, <#= scalar #> b)
    {
        var result = new <#= scalar #>(constant);
<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #> + db * b.D<#= i #>;
<#
}
#>

<#
for (var i = 0; i < size; i++) {
#>
        var ca<#= i #> = dada * a.D<#= i #> + dadb * b.D<#= i #>;
        var cb<#= i #> = dadb * a.D<#= i #> + dbdb * b.D<#= i #>;
<#
}
#>

<#
for (var i = 0; i < size; i++)
{
#>
<#
    for (var j = i; j < size; j++)
    {
#>
        result.D<#= i #>D<#= j #> = da * a.D<#= i #>D<#= j #> + db * b.D<#= i #>D<#= j #> + ca<#= i #> * a.D<#= j #> + cb<#= i #> * b.D<#= j #>;
<#
    }
}
#>

        return result;
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> Forward(double constant, double da, double db, double dc, double dada, double dadb, double dadc, double dbdb, double dbdc, double dcdc, <#= scalar #> a, <#= scalar #> b, <#= scalar #> c)
    {
        var result = new <#= scalar #>(constant);
<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #> + db * b.D<#= i #> + dc * c.D<#= i #>;
<#
}
#>

<#
for (var i = 0; i < size; i++) {
#>
        var ca<#= i #> = dada * a.D<#= i #> + dadb * b.D<#= i #> + dadc * c.D<#= i #>;
        var cb<#= i #> = dadb * a.D<#= i #> + dbdb * b.D<#= i #> + dbdc * c.D<#= i #>;
        var cc<#= i #> = dadc * a.D<#= i #> + dbdc * b.D<#= i #> + dcdc * c.D<#= i #>;
<#
}
#>

<#
for (var i = 0; i < size; i++)
{
#>
<#
    for (var j = i; j < size; j++)
    {
#>
        result.D<#= i #>D<#= j #> = da * a.D<#= i #>D<#= j #> + db * b.D<#= i #>D<#= j #> + dc * c.D<#= i #>D<#= j #> + ca<#= i #> * a.D<#= j #> + cb<#= i #> * b.D<#= j #> + cc<#= i #> * c.D<#= j #>;
<#
    }
}
#>

        return result;
    }

    // neg

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator -(<#= scalar #> a)
    {
        return MathD.Negative(a);
    }

    // add

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator +(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Add(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator +(double lhs, <#= scalar #> rhs)
    {
        return MathD.Add(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator +(<#= scalar #> lhs, double rhs)
    {
        return MathD.Add(lhs, rhs);
    }

    // sub

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator -(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Subtract(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator -(double lhs, <#= scalar #> rhs)
    {
        return MathD.Subtract(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator -(<#= scalar #> lhs, double rhs)
    {
        return MathD.Subtract(lhs, rhs);
    }

    // mul

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator *(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Multiply(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator *(double lhs, <#= scalar #> rhs)
    {
        return MathD.Multiply(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator *(<#= scalar #> lhs, double rhs)
    {
        return MathD.Multiply(lhs, rhs);
    }

    // div

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator /(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Divide(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator /(double lhs, <#= scalar #> rhs)
    {
        return MathD.Divide(lhs, rhs);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= scalar #> operator /(<#= scalar #> lhs, double rhs)
    {
        return MathD.Divide(lhs, rhs);
    }
}
<# } #>
