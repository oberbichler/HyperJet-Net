<#@ template hostspecific="false" language="C#" #>
namespace HyperJet;

using System;
using System.Diagnostics;

<# for (var size = 1; size <= 12; size++)
{
    var scalar = $"DD{size}Scalar";
    var vector = $"DD{size}Vector2";

    if (size > 1)
    {
#>

<#
    }
#>
[DebuggerDisplay("[{X}, {Y}]")]
public struct <#= vector #>
{
    public readonly <#= scalar #> X;
    public readonly <#= scalar #> Y;

    public <#= vector #>(<#= scalar #> x, <#= scalar #> y)
    {
        X = x ?? throw new ArgumentNullException(nameof(x));
        Y = y ?? throw new ArgumentNullException(nameof(y));
    }

    public <#= vector #>((<#= scalar #>, <#= scalar #>) xy)
    {
        var (x, y) = xy;

        X = x ?? throw new NullReferenceException(nameof(x));
        Y = y ?? throw new NullReferenceException(nameof(y));
    }

    // Data access

    public <#= scalar #> this[int index] => index switch
    {
        0 => X,
        1 => Y,
        _ => throw new IndexOutOfRangeException()
    };

    public static <#= vector #> operator *(double rhs, in <#= vector #> lhs)
    {
        var x = lhs.X * rhs;
        var y = lhs.Y * rhs;

        return new <#= vector #>(x, y);
    }

    public static <#= vector #> operator *(<#= scalar #> rhs, in <#= vector #> lhs)
    {
        var x = lhs.X * rhs;
        var y = lhs.Y * rhs;

        return new <#= vector #>(x, y);
    }

    public static <#= vector #> operator *(<#= vector #> rhs, in <#= scalar #> lhs)
    {
        return lhs * rhs;
    }

    public static <#= vector #> operator +(in <#= vector #> lhs, in <#= vector #> rhs)
    {
        var x = lhs.X + rhs.X;
        var y = lhs.Y + rhs.Y;

        return new <#= vector #>(x, y);
    }

    public static <#= vector #> operator -(in <#= vector #> lhs, in <#= vector #> rhs)
    {
        var x = lhs.X - rhs.X;
        var y = lhs.Y - rhs.Y;

        return new <#= vector #>(x, y);
    }

    public static <#= vector #> operator *(in <#= vector #> lhs, double rhs)
    {
        return rhs * lhs;
    }

    public static <#= vector #> operator /(in <#= vector #> lhs, double rhs)
    {
        var x = lhs.X / rhs;
        var y = lhs.Y / rhs;

        return new <#= vector #>(x, y);
    }

    public static <#= vector #> operator /(in <#= vector #> lhs, <#= scalar #> rhs)
    {
        var x = lhs.X / rhs;
        var y = lhs.Y / rhs;

        return new <#= vector #>(x, y);
    }
}
<# } #>
