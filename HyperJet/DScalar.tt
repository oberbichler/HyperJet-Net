<#@ template hostspecific="false" language="C#" #>
#pragma warning disable IDE0017

namespace HyperJet;

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"D{size}Scalar";
    
    if (size > 1)
    {
#>

<#
    }
#>
[StructLayout(LayoutKind.Sequential)]
[DebuggerDisplay("{Constant}")]
public class <#= scalar #> : IScalar
{
    public double Constant;
<# for (var i = 0; i < size; i++) { #>
    public double D<#= i #>;
<#
}
#>

    public <#= scalar #>()
    {
    }

    public <#= scalar #>(double constant)
    {
        Constant = constant;
    }

    public <#= scalar #>(double constant<# for (var i = 0; i < size; i++) { #>, double d<#= i #><# }#>)
    {
        Constant = constant;
<#
for (var i = 0; i < size; i++)
{
#>
        D<#= i #> = d<#= i #>;
<#
}
#>
    }
    
    public <#= scalar #>(ReadOnlySpan<double> data)
    {
<#
var it = 0;
#>
        Constant = data[<#= it++ #>];
<#
for (var i = 0; i < size; i++)
{
#>
        D<#= i #> = data[<#= it++ #>];
<#
}
#>
    }

<#
if (size == 1)
{
#>
    public static <#= scalar #> Variable(double constant)
    {
        var result = new <#= scalar #>();
        result.Constant = constant;
        result.D0 = 1;
        return result;
    }

<#
}
else
{
    for (var i = 0; i < size; i++)
    {
#>
    public static <#= scalar #> Variable<#= i #>(double constant)
    {
        var result = new <#= scalar #>();
        result.Constant = constant;
        result.D<#= i #> = 1;
        return result;
    }

<#
    }
#>
    public (<#= scalar #><# for (var i = 1; i < size; i++) { #>, <#= scalar #><# } #>) Variables(double constant0<# for (var i = 1; i < size; i++) { #>, double constant<#= i #><# } #>)
    {
<#
for (var i = 0; i < size; i++)
{
#>
        var variable<#= i #> = Variable<#= i #>(constant<#= i #>);
<#
}
#>

        return (variable0<# for (var i = 1; i < size; i++) { #>, variable<#= i #><# } #>);
    }

<#
}
#>

    // Data access

    public int Size { get; } = <#= size #>;
    
    unsafe public Span<double> Data()
    {
        var ptr = Unsafe.AsPointer(ref Constant);
        return new Span<double>(ptr, <#= 1 + size #>);
    }
    
    public double[] ToArray()
    {
        return Data().ToArray();
    }
    
    public ref double Data(int i)
    {
		if (i >= <#= 1 + size #>)
			throw new IndexOutOfRangeException();

		return ref Unsafe.Add(ref Constant, i);
    }

    public ref double D(int i)
    {
		if (i >= <#= size #>)
			throw new IndexOutOfRangeException();

		return ref Unsafe.Add(ref D0, i);
    }

    // Transformations

    public static <#= scalar #> Forward(double constant, double da, <#= scalar #> a)
    {
        var result = new <#= scalar #>(constant);
<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #>;
<#
}
#>
        return result;
    }

    public static <#= scalar #> Forward(double constant, double da, double db, <#= scalar #> a, <#= scalar #> b)
    {
        var result = new <#= scalar #>(constant);
<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #> + db * b.D<#= i #>;
<#
}
#>
        return result;
    }
    
    public static <#= scalar #> Forward(double constant, double da, double db, double dc, <#= scalar #> a, <#= scalar #> b, <#= scalar #> c)
    {
        var result = new <#= scalar #>(constant);
<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = da * a.D<#= i #> + db * b.D<#= i #> + dc * c.D<#= i #>;
<#
}
#>
        return result;
    }

    // neg

    public static <#= scalar #> operator -(<#= scalar #> a)
    {
        return MathD.Negative(a);
    }

    // add

    public static <#= scalar #> operator +(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Add(lhs, rhs);
    }

    public static <#= scalar #> operator +(double lhs, <#= scalar #> rhs)
    {
        return MathD.Add(lhs, rhs);
    }

    public static <#= scalar #> operator +(<#= scalar #> lhs, double rhs)
    {
        return MathD.Add(lhs, rhs);
    }

    // sub

    public static <#= scalar #> operator -(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Subtract(lhs, rhs);
    }

    public static <#= scalar #> operator -(double lhs, <#= scalar #> rhs)
    {
        return MathD.Subtract(lhs, rhs);
    }

    public static <#= scalar #> operator -(<#= scalar #> lhs, double rhs)
    {
        return MathD.Subtract(lhs, rhs);
    }

    // mul

    public static <#= scalar #> operator *(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Multiply(lhs, rhs);
    }

    public static <#= scalar #> operator *(double lhs, <#= scalar #> rhs)
    {
        return MathD.Multiply(lhs, rhs);
    }

    public static <#= scalar #> operator *(<#= scalar #> lhs, double rhs)
    {
        return MathD.Multiply(lhs, rhs);
    }

    // div

    public static <#= scalar #> operator /(<#= scalar #> lhs, <#= scalar #> rhs)
    {
        return MathD.Divide(lhs, rhs);
    }

    public static <#= scalar #> operator /(double lhs, <#= scalar #> rhs)
    {
        return MathD.Divide(lhs, rhs);
    }

    public static <#= scalar #> operator /(<#= scalar #> lhs, double rhs)
    {
        return MathD.Divide(lhs, rhs);
    }
}
<# } #>
