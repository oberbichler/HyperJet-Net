<#@ template hostspecific="false" language="C#" #>
namespace HyperJet;

using System;

public static partial class LinearAlgebraD
{
<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"D{size}Scalar";
    var vector = $"D{size}Vector3";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> SquaredNorm(<#= vector #> v)
    {
        var constant = v.X.Constant * v.X.Constant + v.Y.Constant * v.Y.Constant + v.Z.Constant * v.Z.Constant;

        var result = new <#= scalar #>(constant);

        var d0 = 2 * v.X.Constant;
        var d1 = 2 * v.Y.Constant;
        var d2 = 2 * v.Z.Constant;

<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = d0 * v.X.D<#= i #> + d1 * v.Y.D<#= i #> + d2 * v.Z.D<#= i #>;
<#
}
#>

        return result;
    }
<#
}
#>

<#
for (var size = 1; size <= 12; size++)
{
    var scalar = $"DD{size}Scalar";
    var vector = $"DD{size}Vector3";
    
    if (size > 1) {
#>

<#
    }
#>
    public static <#= scalar #> SquaredNorm(<#= vector #> v)
    {
        var constant = v.X.Constant * v.X.Constant + v.Y.Constant * v.Y.Constant + v.Z.Constant * v.Z.Constant;

        var result = new <#= scalar #>(constant);

        var d0 = 2 * v.X.Constant;
        var d1 = 2 * v.Y.Constant;
        var d2 = 2 * v.Z.Constant;

<#
for (var i = 0; i < size; i++)
{
#>
        result.D<#= i #> = d0 * v.X.D<#= i #> + d1 * v.Y.D<#= i #> + d2 * v.Z.D<#= i #>;
<#
}
#>

<#
for (var i = 0; i < size; i++)
{
    for (var j = i; j < size; j++)
    {
#>
        result.D<#= i #>D<#= j #> = d0 * v.X.D<#= i #>D<#= j #> + d1 * v.Y.D<#= i #>D<#= j #> + d2 * v.Z.D<#= i #>D<#= j #> + 2 * v.X.D<#= i #> * v.X.D<#= j #> + 2 * v.Y.D<#= i #> * v.Y.D<#= j #> + 2 * v.Z.D<#= i #> * v.Z.D<#= j #>;
<#
    }
}
#>

        return result;
    }
<#
}
#>
}
